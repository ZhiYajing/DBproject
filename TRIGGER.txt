CREATE OR REPLACE TRIGGER TR1
AFTER INSERT ON ORDERBOOK 
FOR EACH ROW
BEGIN
UPDATE BOOKS  SET AMOUNT = AMOUNT-1 WHERE BOOKNUMBER = :new.BOOKNUMBER;
END;
/

CREATE OR REPLACE TRIGGER TR2
AFTER DELETE ON ORDERBOOK 
FOR EACH ROW
BEGIN
UPDATE BOOKS  SET AMOUNT = AMOUNT+1 WHERE BOOKNUMBER = :new.BOOKNUMBER;
END;
/

CREATE OR REPLACE TRIGGER TR3
AFTER INSERT OR DELETE ON ORDERS 
FOR EACH ROW
DECLARE 
pragma autonomous_transaction; 
ALL_IN_CURRENT_YEAR NUMBER;
BEGIN
SELECT SUM(TOTALPRICE) INTO ALL_IN_CURRENT_YEAR FROM ORDERS WHERE STUDENTNUMBER=:new.STUDENTNUMBER AND ORDERDATE>=trunc(sysdate,'YYYY');
IF(ALL_IN_CURRENT_YEAR>1000 and ALL_IN_CURRENT_YEAR<=2000) THEN
    UPDATE STUDENT  SET DISCOUNTLEVEL = 0.1 WHERE STUDENTNUMBER = :new.STUDENTNUMBER;
END IF;
IF(ALL_IN_CURRENT_YEAR>2000) THEN
    UPDATE STUDENT  SET DISCOUNTLEVEL = 0.2 WHERE STUDENTNUMBER = :new.STUDENTNUMBER;
END IF;
commit;
END;
/

CREATE OR REPLACE TRIGGER TR4
AFTER INSERT ON ORDERS 
FOR EACH ROW
DECLARE 
pragma autonomous_transaction;
ORDER_TOTAL_PRICE NUMBER;
DISCOUNT NUMBER;
BEGIN
SELECT DISCOUNTLEVEL INTO DISCOUNT FROM STUDENT WHERE STUDENTNUMBER = :new.STUDENTNUMBER;
exception 
     when no_data_found then 
        DISCOUNT := 0; 
SELECT SUM(a.PRICE) INTO ORDER_TOTAL_PRICE FROM BOOK a,ORDERBOOK b WHERE a.BOOKNUMBER=b.BOOKNUMBER and b.ORDERID=:new.ORDERID;
UPDATE ORDERS SET TOTALPRICE = ORDER_TOTAL_PRICE * (1 -DISCOUNT ) WHERE ORDERID = :new.ORDERID;
commit;
END;
/

CREATE OR REPLACE TRIGGER TR5
BEFORE INSERT ON ORDERS
FOR EACH ROW
BEGIN
 IF ((:new.PAYMENTMETHOD='credit card'OR :new.PAYMENTMETHOD='card') AND (:new.CARDNO='' OR :new.CARDNO is NULL)) THEN
     RAISE_APPLICATION_ERROR(-20001, ' the card no. cannot be empty if the payment method is by credit card!');
 END IF;
END;
/
